#!/bin/sh

CURRENCY=BTC
FROMDATE=`date -d '-6 months' +%Y/%m/%d`
BASEPATH=.
WAIT=5

while test "$1"
do
    if echo "$1" | grep '^[A-Z]*' >/dev/null; then
	CURRENCY="$1"
    elif echo "$1" | grep -E '^-(f|-fromyyyymmdd)$' >/dev/null; then
	if ! echo "$2" | grep -E '^[1-3][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]$' >/dev/null; then
	    echo "couldn't parse date from $2, expected format 'YYYY/MM/DD', using default" >&2
	else
	    FROMDATE="$2"
	fi
	shift
    elif echo "$1" | grep -E "^-(w|-wait)$" >/dev/null; then
	if test "$2" -gt 1; then
	    WAIT="$2"
	else
	    echo "discarding invalid wait input - should be at least 1 second, avoiding ratelimit (15/sec, 8000/hour)" >&2
	fi
	shift
    else
	echo "discarding un-supported '$1'" >&2
    fi
    shift
done
for d in . .. /usr/share/cointracking ./cointracking ./opencointracking
do
    test -s "$d/package.json" && BASEPATH=. && break
done

CURID=`./utils/get_currency_id "$CURRENCY" 2>/dev/null || echo FAIL`
if test "$CURID" = FAIL; then
    failed resolving "$CURRENCY" >&2
    exit 1
fi
OLDER=`./utils/get_older_rate "$CURRENCY" 2>/dev/null || echo FAIL`
if test "$OLDER" = FAIL; then
    echo failed querying for "$CURRENCY" >&2
    exit 1
fi
if test "$OLDER" = 0; then
    OLDER=`date +%s`
fi
OLDERDB=`date -d "@$OLDER" +%Y/%m/%d`

echo "going from $FROMDATE to $OLDERDB"
eval `echo "$FROMDATE" | sed 's|^\([0-9]*\)/\([0-9]*\)/\([0-9]*\)$|REFYYYY=\1 REFMM=\2 REFDD=\3|'`
eval `echo "$OLDERDB" | sed 's|^\([0-9]*\)/\([0-9]*\)/\([0-9]*\)$|TGTYYYY=\1 TGTMM=\2 TGTDD=\3|'`
CURYYYY=$REFYYYY CURMM=$REFMM CURDD=$REFDD
while test "$CURYYYY" -le "$TGTYYYY"
do
    while test \( "$CURMM" -le 12 -a "$CURYYYY" -lt "$TGTYYYY" \) -o "$CURMM" -le "$TGTMM"
    do
	MDAYS=`cal $CURMM $CURYYYY | awk 'NF{DAYS=$NF}END{print DAYS}'`
	#echo "$CURYYYY/$CURMM has $MDAYS days"
	while test \( \( "$CURMM" -lt "$TGTMM" -o "$CURYYYY" -lt "$TGTYYYY" \) -a "$CURDD" -le "$MDAYS" \) -o \( "$CURMM" -eq "$TGTMM" -a "$CURYYYY" -eq "$TGTYYYY" -a "$CURDD" -le "$TGTDD" \)
	do
	    echo "processing $CURYYYY/$CURMM/$CURDD (in $WAIT seconds)"
	    sleep $WAIT
	    cat <<EOF | /usr/bin/env node
const cryptoChecker = require('$BASEPATH/lib/crypto-checker.js');
cryptoChecker.getDay($CURYYYY, $CURMM, $CURDD, $CURID);
console.log('executed cryptoChecker.getDay($CURYYYY, $CURMM, $CURDD, $CURID);');
EOF
	    CURDD=`expr $CURDD + 1`
	    test "$CURDD" -gt "$MDAYS" && break
	done
	CURDD=1
	CURMM=`expr $CURMM + 1`
	test "$CURMM" -gt "$TGTMM" && break
    done
    CURMM=1
    CURYYYY=`expr $CURYYYY + 1`
done
echo "done syncing $CURRENCY from $FROMDATE to $OLDERDB"

exit 0
